generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categoria {
  id    String  @id @default(uuid()) @db.Uuid
  nome  String  @unique
  slug  String? @unique
  itens Item[]
}

model Usuario {
  id                  String          @id @default(uuid()) @db.Uuid
  CPF                 String          @unique
  RG                  String          @unique
  nome                String
  email_institucional String          @unique
  senha               String
  telefone            String
  data_nascimento     DateTime
  reputacao_media     Float           @default(0)
  reputacao_count     Int?
  curso               String
  foto_documento_url  String
  criados             AvaliacaoItem[] @relation("CriadorAvaliacao")
  avaliacoes          AvaliacaoItem[] @relation("UsuarioAvaliacoes")
  carrinho            CarrinhoItem[]
  favoritos           Favorito[]
  interesses          Interesse[]
  itens               Item[]
  sessions            Session[]
}

model Item {
  id                    String            @id @default(uuid()) @db.Uuid
  usuario_id            String            @db.Uuid
  categoria_id          String            @db.Uuid
  titulo                String
  descricao             String?
  tipo_transacao        TipoTransacao
  estado_conservacao    EstadoConservacao
  prazo_dias            Int?
  quantidade_disponivel Int               @default(1)
  preco_centavos        Int?
  preco_formatado       String?
  created_at            DateTime          @default(now())
  avaliacoes            AvaliacaoItem[]
  carrinhos             CarrinhoItem[]
  favoritos             Favorito[]
  imagens               ImagemAnuncio[]
  interesses            Interesse[]
  categoria             Categoria         @relation(fields: [categoria_id], references: [id])
  usuario               Usuario           @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
}

model ImagemAnuncio {
  id         String @id @default(uuid()) @db.Uuid
  anuncio_id String @db.Uuid
  url        String
  ordem      Int
  item       Item   @relation(fields: [anuncio_id], references: [id])
}

model AvaliacaoItem {
  id                String    @id @default(uuid()) @db.Uuid
  usuario_id        String    @db.Uuid
  anuncio_id        String    @db.Uuid
  nota              Float
  titulo            String?
  comentario        String?
  data              DateTime  @default(now())
  resposta_vendedor String?
  respondido_em     DateTime?
  criado_por        String?   @db.Uuid
  item              Item      @relation(fields: [anuncio_id], references: [id])
  criador           Usuario?  @relation("CriadorAvaliacao", fields: [criado_por], references: [id])
  usuario           Usuario   @relation("UsuarioAvaliacoes", fields: [usuario_id], references: [id])
}

model Interesse {
  id         String          @id @default(uuid()) @db.Uuid
  usuario_id String          @db.Uuid
  anuncio_id String          @db.Uuid
  quantidade Int             @default(1)
  status     StatusInteresse @default(PENDENTE)
  created_at DateTime        @default(now())
  item       Item            @relation(fields: [anuncio_id], references: [id])
  usuario    Usuario         @relation(fields: [usuario_id], references: [id])
}

model CarrinhoItem {
  id              String   @id @default(uuid()) @db.Uuid
  usuario_id      String   @db.Uuid
  anuncio_id      String   @db.Uuid
  quantidade      Int      @default(1)
  interested_flag Boolean  @default(false)
  prazo_snapshot  Int?
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())
  item            Item     @relation(fields: [anuncio_id], references: [id])
  usuario         Usuario  @relation(fields: [usuario_id], references: [id])

  @@unique([usuario_id, anuncio_id])
}

model Favorito {
  id         String   @id @default(uuid()) @db.Uuid
  usuario_id String   @db.Uuid
  anuncio_id String   @db.Uuid
  created_at DateTime @default(now())
  item       Item     @relation(fields: [anuncio_id], references: [id])
  usuario    Usuario  @relation(fields: [usuario_id], references: [id])

  @@unique([usuario_id, anuncio_id])
}

model Session {
  id         String   @id @default(uuid()) @db.Uuid
  token      String   @unique
  usuario_id String   @db.Uuid
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  usuario    Usuario  @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
}

enum TipoTransacao {
  VENDA
  TROCA
  DOACAO
  EMPRESTIMO
}

enum EstadoConservacao {
  NOVO
  SEMINOVO
  USADO
}

enum StatusInteresse {
  PENDENTE
  ACEITO
  RECUSADO
}
